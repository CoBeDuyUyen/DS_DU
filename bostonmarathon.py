# -*- coding: utf-8 -*-
"""BostonMarathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12SvLO6yr-bJNIQKyf-gaEan8r5CMN6bI

# 1. Introduction:
"""

!pip install nbconvert
!jupyter nbconvert --to html Untitled0.ipynb
!pip install PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':"1vc5oDkCaLJDUovwg5jIp83n_O_8eq35a"})   # replace the id with id of file you want to access
downloaded.GetContentFile('2014.csv')

import pandas as pd
import plotly.express as px
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# 2. Exploring the data"""

data = pd.read_csv("2014.csv")
data.head(10)

data.shape

data.dtypes

display(data.isnull().sum()/len(data))

"""Feature "ctz" has many missing-values, so we will remove this feature from the data."""

data.drop('ctz', inplace=True, axis = 1)
data.drop('name', inplace=True, axis = 1)

data['10k'] = pd.to_numeric(data['10k'], errors='coerce')
data['25k'] = pd.to_numeric(data['25k'], errors='coerce')
data['35k'] = pd.to_numeric(data['35k'], errors='coerce')
data['30k'] = pd.to_numeric(data['30k'], errors='coerce')
data['5k'] = pd.to_numeric(data['5k'], errors='coerce')
data['20k'] = pd.to_numeric(data['20k'], errors='coerce')
data['40k'] = pd.to_numeric(data['40k'], errors='coerce')
data['half'] = pd.to_numeric(data['half'], errors='coerce')

data.dtypes

display(data.isnull().sum()/len(data))

data['state'] = data['state'].fillna('NA')
data['country'] = data['country'].fillna('NA')
data['city'] = data['city'].fillna('NA')

display(data.isnull().sum()/len(data))

"""Replace "-" by "-1". Athletes who could not finished the race or have no data."""

data['10k'] = data['10k'].fillna(-1)
data['25k'] = data['25k'].fillna(-1)
data['35k'] = data['35k'].fillna(-1)
data['30k'] = data['30k'].fillna(-1)
data['5k'] = data['5k'].fillna(-1)
data['20k'] = data['20k'].fillna(-1)
data['40k'] = data['40k'].fillna(-1)
data['half'] = data['half'].fillna(-1)

display(data.isnull().sum()/len(data))

"""# 3. Visualization:"""

import seaborn as sns
for column in data.columns:
    if data[column].dtypes != object:
        ax = sns.boxplot(x=data[column])
        plt.show()

cont_col = []
for column in data.columns:
    if data[column].dtypes != object:
        cont_col.append(column)
plt.figure(figsize=(20, 40))

for i, column in enumerate(cont_col, 1):
    plt.subplot(9, 2, i)
    data[column].hist(bins=35, color='blue', alpha=0.6)
    plt.xlabel(column)

from sklearn.preprocessing import PowerTransformer
pt = PowerTransformer()

X = data.pace.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
data.pace = pd.DataFrame(X)

X = data.official.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
data.official = pd.DataFrame(X)

X = data.genderdiv.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
data.genderdiv = pd.DataFrame(X)

X = data.overall.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
data.overall = pd.DataFrame(X)

X = data.age.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
data.age = pd.DataFrame(X)

plt.figure(figsize=(14,3))
plt.figure(figsize=(15,10))
correlations = data.corr()
sns.heatmap(round(correlations,2), cmap='RdBu', annot=True, 
            annot_kws={"size": 7}, vmin=-1, vmax=1);

data.describe(percentiles = [.1, .25, .5, .75, .97, .99])

"""# 4. Clustering"""

data = pd.get_dummies(data, columns=['gender'])

data = pd.get_dummies(data, columns=['state'])

data = pd.get_dummies(data, columns=['country'])

data.drop('city', inplace=True, axis = 1)
data.drop('bib', inplace=True, axis = 1)
data.drop('division', inplace=True, axis = 1)

data.drop('gender_M', inplace=True, axis = 1)

data.head()

data.dtypes

import sklearn.cluster as cluster

data_1 = data.drop(['5k', '10k', '25k', '20k', '35k', '30k', '40k', 'half'], axis = 'columns')

K=range(1,12)
wss = []
for k in K:
    kmeans=cluster.KMeans(n_clusters=k,init="k-means++")
    kmeans=kmeans.fit(data_1)
    wss_iter = kmeans.inertia_
    wss.append(wss_iter)

mycenters = pd.DataFrame({'Clusters' : K, 'WSS' : wss})
mycenters

sns.scatterplot(x = 'Clusters', y = 'WSS', data = mycenters, marker="*")

"""=> Choose k = 5"""

from sklearn import metrics
kmeans = cluster.KMeans(n_clusters=5 ,init="k-means++")
# k = kmeans.fit_predict(data_1)
kmeans = kmeans.fit(data_1)
metrics.silhouette_score(data_1, kmeans.labels_, metric='euclidean')

k = kmeans.fit_predict(data_1)

data_1['km'] = kmeans.labels_

data_1['km'].value_counts()

sns.scatterplot(x=data_1["age"], y=data["official"], hue=data_1["km"],
    sizes=(40, 400), hue_norm=(0, 7), palette="deep"
)

sns.scatterplot(x=data_1["age"], y=data["10k"], hue=data_1["km"],
    sizes=(70, 700), hue_norm=(0, 7), palette="rocket_r"
)

sns.scatterplot(x=data["5k"], y=data["10k"], hue=data_1["km"],
    sizes=(70, 700), hue_norm=(0, 7), palette="crest"
)

pd.pivot_table(data_1,index=["km"])

data['km'] = data_1['km']

sns.set_style('darkgrid')
g = sns.FacetGrid(data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'age',bins=20,alpha=0.7)

sns.set_style('darkgrid')
g = sns.FacetGrid(data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'official',bins=20,alpha=0.7)

sns.set_style('darkgrid')
g = sns.FacetGrid(data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'genderdiv',bins=20,alpha=0.7)



import matplotlib.pyplot as plt
data[data["gender_F"] == 0]["km"].hist(bins=35, color='blue', label='Male', alpha=0.6)
data[data["gender_F"] == 1]["km"].hist(bins=35, color='red', label='Female', alpha=0.6)
plt.legend()
plt.xlabel('Clusters')

sns.distplot(data["official"])

d1 = [0, len(data.loc[(data['age'] >= -1.5) & (data['km'] == 0)]), 
      len(data.loc[(data['age'] > -1.5) & (data['age'] <= 0) & (data['km'] == 0)]), 
      len(data.loc[(data['age'] > 0) & (data['age'] <= 1.5) & (data['km'] == 0)]), 
      len(data.loc[(data['age'] > 1.5) & (data['km'] == 0)])]
d2 = [1, len(data.loc[(data['age'] >= -1.5) & (data['km'] == 1)]), 
      len(data.loc[(data['age'] > -1.5) & (data['age'] <= 0) & (data['km'] == 1)]), 
      len(data.loc[(data['age'] > 0) & (data['age'] <= 1.5) & (data['km'] == 1)]), 
      len(data.loc[(data['age'] > 1.5) & (data['km'] == 1)])]
d3 = [2, len(data.loc[(data['age'] >= -1.5) & (data['km'] == 2)]), 
      len(data.loc[(data['age'] > -1.5) & (data['age'] <= 0) & (data['km'] == 2)]), 
      len(data.loc[(data['age'] > 0) & (data['age'] <= 1.5) & (data['km'] == 2)]), 
      len(data.loc[(data['age'] > 1.5) & (data['km'] == 2)])]
d4 = [3, len(data.loc[(data['age'] >= -1.5) & (data['km'] == 3)]), 
      len(data.loc[(data['age'] > -1.5) & (data['age'] <= 0) & (data['km'] == 3)]), 
      len(data.loc[(data['age'] > 0) & (data['age'] <= 1.5) & (data['km'] == 3)]), 
      len(data.loc[(data['age'] > 1.5) & (data['km'] == 3)])]
d5 = [4, len(data.loc[(data['age'] >= -1.5) & (data['km'] == 4)]), 
      len(data.loc[(data['age'] > -1.5) & (data['age'] <= 0) & (data['km'] == 4)]), 
      len(data.loc[(data['age'] > 0) & (data['age'] <= 1.5) & (data['km'] == 4)]), 
      len(data.loc[(data['age'] > 1.5) & (data['km'] == 4)])]
d = [d1, d2, d3, d4, d5]
d
df_age = pd.DataFrame(d, columns=['cluster', 'age1', 'age2', 'age3', 'age4'])
df_age

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age1,
    name='age1',
    marker_color='blueviolet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age2,
    name='age2',
    marker_color='magenta'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age3,
    name='age3',
    marker_color='violet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age4,
    name='age4',
    marker_color='indigo'
))
fig.show()

sns.distplot(data["official"])

d1 = [0, len(data.loc[(data['official'] >= -1.5) & (data['km'] == 0)]), 
      len(data.loc[(data['official'] > -1.5) & (data['official'] <= 0) & (data['km'] == 0)]), 
      len(data.loc[(data['official'] > 0) & (data['official'] <= 1.5) & (data['km'] == 0)]), 
      len(data.loc[(data['official'] > 1.5) & (data['km'] == 0)])]
d2 = [1, len(data.loc[(data['official'] >= -1.5) & (data['km'] == 1)]), 
      len(data.loc[(data['official'] > -1.5) & (data['official'] <= 0) & (data['km'] == 1)]), 
      len(data.loc[(data['official'] > 0) & (data['official'] <= 1.5) & (data['km'] == 1)]), 
      len(data.loc[(data['official'] > 1.5) & (data['km'] == 1)])]
d3 = [2, len(data.loc[(data['official'] >= -1.5) & (data['km'] == 2)]), 
      len(data.loc[(data['official'] > -1.5) & (data['official'] <= 0) & (data['km'] == 2)]), 
      len(data.loc[(data['official'] > 0) & (data['official'] <= 1.5) & (data['km'] == 2)]), 
      len(data.loc[(data['official'] > 1.5) & (data['km'] == 3)])]
d4 = [3, len(data.loc[(data['official'] >= -1.5) & (data['km'] == 3)]), 
      len(data.loc[(data['official'] > -1.5) & (data['official'] <= 0) & (data['km'] == 3)]), 
      len(data.loc[(data['official'] > 0) & (data['official'] <= 1.5) & (data['km'] == 3)]), 
      len(data.loc[(data['official'] > 1.5) & (data['km'] == 3)])]
d5 = [4, len(data.loc[(data['official'] >= -1.5) & (data['km'] == 4)]), 
      len(data.loc[(data['official'] > -1.5) & (data['official'] <= 0) & (data['km'] == 4)]), 
      len(data.loc[(data['official'] > 0) & (data['official'] <= 1.5) & (data['km'] == 4)]), 
      len(data.loc[(data['official'] > 1.5) & (data['km'] == 4)])]
d = [d1, d2, d3, d4, d5]
d
df_o = pd.DataFrame(d, columns=['cluster', 'o1', 'o2', 'o3', 'o4'])
df_o

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o1,
    name='o1',
    marker_color='blueviolet'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o2,
    name='o2',
    marker_color='magenta'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o3,
    name='o3',
    marker_color='violet'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o4,
    name='o4',
    marker_color='indigo'
))
fig.show()

"""## K-Prototype"""

!pip install kmodes
from kmodes.kprototypes import KPrototypes

Data = pd.read_csv("2014.csv")

Data.head()

Data.drop('ctz', inplace=True, axis = 1)
Data.drop('name', inplace=True, axis = 1)
Data.drop('bib', inplace=True, axis = 1)
Data.drop('city', inplace=True, axis = 1)
Data.drop('division', inplace=True, axis = 1)
Data['state'] = Data['state'].fillna('NA')
Data['country'] = Data['country'].fillna('NA')

display(Data.isnull().sum()/len(data))

Data_1 = Data.drop(['5k', '10k', '25k', '20k', '35k', '30k', '40k', 'half'], axis = 'columns')

Data_1.head()

Data_1.dtypes

a = Data_1['overall'].value_counts()
print(len(a))

Data_1.drop('genderdiv', inplace=True, axis = 1)

a = Data_1['country'].value_counts()
print(len(a))

X = Data_1.pace.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
Data_1.pace = pd.DataFrame(X)

X = Data_1.official.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
Data_1.official = pd.DataFrame(X)

X = Data_1.age.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
Data_1.age = pd.DataFrame(X)

X = Data_1.overall.values.reshape(-1,1)
pt.fit(X)
X = pt.transform(X)
Data_1.overall = pd.DataFrame(X)

Data_1.dtypes

K=range(1,7)
X = Data_1
cost = []
for k in K:
    kproto = KPrototypes(n_clusters = k, init='Huang') 
    kp= kproto.fit(X, categorical=[0, 5, 6])
    print(kp.cost_)
    cost.append(kp.cost_)

mycenters = pd.DataFrame({'Clusters' : K, 'cost' : cost})
mycenters

sns.scatterplot(x = 'Clusters', y = 'cost', data = mycenters, marker="*")

from sklearn import metrics
kproto = KPrototypes(n_clusters = 4, init='Huang') 
kp= kproto.fit(X, categorical=[0, 5, 6])

kproto.labels_

Data_1['km'] = kproto.labels_
Data['km'] = kproto.labels_

sns.scatterplot(x=Data["age"], y=Data["10k"], hue=Data_1["km"],
    sizes=(70, 700), hue_norm=(0, 7), palette="rocket_r"
)

pd.pivot_table(Data_1,index=["km"])

sns.distplot(Data_1["age"])

d1 = [0, len(Data_1.loc[(Data_1['age'] < -1.5) & (Data_1['km'] == 0)]), 
      len(Data_1.loc[(Data_1['age'] >= -1.5) & (Data_1['age'] <= 0) & (Data['km'] == 0)]), 
      len(Data_1.loc[(Data_1['age'] > 0) & (Data_1['age'] <= 1.5) & (Data['km'] == 0)]), 
      len(Data_1.loc[(Data_1['age'] > 1.5) & (Data_1['km'] == 0)])]
d2 = [1, len(Data_1.loc[(Data_1['age'] < -1.5) & (Data_1['km'] == 1)]), 
      len(Data_1.loc[(Data_1['age'] >= -1.5) & (Data_1['age'] <= 0) & (Data['km'] == 1)]), 
      len(Data_1.loc[(Data_1['age'] > 0) & (Data_1['age'] <= 1.5) & (Data['km'] == 1)]), 
      len(Data_1.loc[(Data_1['age'] > 1.5) & (Data_1['km'] == 1)])]
d3 = [2, len(Data_1.loc[(Data_1['age'] < -1.5) & (Data_1['km'] == 2)]), 
      len(Data_1.loc[(Data_1['age'] >= -1.5) & (Data_1['age'] <= 0) & (Data['km'] == 2)]), 
      len(Data_1.loc[(Data_1['age'] > 0) & (Data_1['age'] <= 1.5) & (Data['km'] == 2)]), 
      len(Data_1.loc[(Data_1['age'] > 1.5) & (Data_1['km'] == 2)])]
d4 = [3, len(Data_1.loc[(Data_1['age'] < -1.5) & (Data_1['km'] == 3)]), 
      len(Data_1.loc[(Data_1['age'] >= -1.5) & (Data_1['age'] <= 0) & (Data['km'] == 3)]), 
      len(Data_1.loc[(Data_1['age'] > 0) & (Data_1['age'] <= 1.5) & (Data['km'] == 3)]), 
      len(Data_1.loc[(Data_1['age'] > 1.5) & (Data_1['km'] == 3)])]
d = [d1, d2, d3, d4]
d
df_age = pd.DataFrame(d, columns=['cluster', 'age1', 'age2', 'age3', 'age4'])
df_age

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age1,
    name='age1',
    marker_color='blueviolet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age2,
    name='age2',
    marker_color='magenta'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age3,
    name='age3',
    marker_color='violet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age4,
    name='age4',
    marker_color='indigo'
))
fig.show()

Data[Data["gender"] == 'M']["km"].hist(bins=35, color='blue', label='Male', alpha=0.6)
Data[Data["gender"] == 'F']["km"].hist(bins=35, color='red', label='Female', alpha=0.6)
plt.legend()
plt.xlabel('Clusters')

d1 = [0, len(Data_1.loc[(Data_1['official'] < -1.5) & (Data_1['km'] == 0)]), 
      len(Data_1.loc[(Data_1['official'] >= -1.5) & (Data_1['official'] <= 0) & (Data['km'] == 0)]), 
      len(Data_1.loc[(Data_1['official'] > 0) & (Data_1['official'] <= 1.5) & (Data['km'] == 0)]), 
      len(Data_1.loc[(Data_1['official'] > 1.5) & (Data_1['km'] == 0)])]
d2 = [1, len(Data_1.loc[(Data_1['official'] < -1.5) & (Data_1['km'] == 1)]), 
      len(Data_1.loc[(Data_1['official'] >= -1.5) & (Data_1['official'] <= 0) & (Data['km'] == 1)]), 
      len(Data_1.loc[(Data_1['official'] > 0) & (Data_1['official'] <= 1.5) & (Data['km'] == 1)]), 
      len(Data_1.loc[(Data_1['official'] > 1.5) & (Data_1['km'] == 1)])]
d3 = [2, len(Data_1.loc[(Data_1['official'] < -1.5) & (Data_1['km'] == 2)]), 
      len(Data_1.loc[(Data_1['official'] >= -1.5) & (Data_1['official'] <= 0) & (Data['km'] == 2)]), 
      len(Data_1.loc[(Data_1['official'] > 0) & (Data_1['official'] <= 1.5) & (Data['km'] == 2)]), 
      len(Data_1.loc[(Data_1['official'] > 1.5) & (Data_1['km'] == 2)])]
d4 = [3, len(Data_1.loc[(Data_1['official'] < -1.5) & (Data_1['km'] == 3)]), 
      len(Data_1.loc[(Data_1['official'] >= -1.5) & (Data_1['official'] <= 0) & (Data['km'] == 3)]), 
      len(Data_1.loc[(Data_1['official'] > 0) & (Data_1['official'] <= 1.5) & (Data['km'] == 3)]), 
      len(Data_1.loc[(Data_1['official'] > 1.5) & (Data_1['km'] == 3)])]
d = [d1, d2, d3, d4]
d
df_o = pd.DataFrame(d, columns=['cluster', 'o1', 'o2', 'o3', 'o4'])
df_o

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o1,
    name='o1',
    marker_color='blueviolet'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o2,
    name='o2',
    marker_color='magenta'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o3,
    name='o3',
    marker_color='violet'
))
fig.add_trace(go.Bar(
    x = df_o.cluster,
    y = df_o.o4,
    name='o4',
    marker_color='indigo'
))
fig.show()

sns.set_style('darkgrid')
g = sns.FacetGrid(Data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'age',bins=20,alpha=0.7)

sns.set_style('darkgrid')
g = sns.FacetGrid(Data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'pace',bins=20,alpha=0.7)

sns.set_style('darkgrid')
g = sns.FacetGrid(Data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'gender',bins=20,alpha=0.7)

sns.set_style('darkgrid')
g = sns.FacetGrid(Data,hue="km",palette='coolwarm',size=6,aspect=2)
g = g.map(plt.hist,'official',bins=20,alpha=0.7)