# -*- coding: utf-8 -*-
"""BostonMarathon.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12SvLO6yr-bJNIQKyf-gaEan8r5CMN6bI

# 1. Introduction:
"""

!pip install nbconvert
!jupyter nbconvert --to html Untitled0.ipynb
!pip install PyDrive
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials

auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

downloaded = drive.CreateFile({'id':"1vc5oDkCaLJDUovwg5jIp83n_O_8eq35a"})   # replace the id with id of file you want to access
downloaded.GetContentFile('2014.csv')

import pandas as pd
import plotly.express as px
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""# 2. Exploring the data"""

data = pd.read_csv("2014.csv")
data.head(10)

data.shape

data.dtypes

display(data.isnull().sum()/len(data))

"""Feature "ctz" has many missing-values, so we will remove this feature from the data."""

data.drop('ctz', inplace=True, axis = 1)
data.drop('name', inplace=True, axis = 1)

data['10k'] = pd.to_numeric(data['10k'], errors='coerce')
data['25k'] = pd.to_numeric(data['25k'], errors='coerce')
data['35k'] = pd.to_numeric(data['35k'], errors='coerce')
data['30k'] = pd.to_numeric(data['30k'], errors='coerce')
data['5k'] = pd.to_numeric(data['5k'], errors='coerce')
data['20k'] = pd.to_numeric(data['20k'], errors='coerce')
data['40k'] = pd.to_numeric(data['40k'], errors='coerce')
data['half'] = pd.to_numeric(data['half'], errors='coerce')

data.dtypes

display(data.isnull().sum()/len(data))

data['state'] = data['state'].fillna('NA')
data['country'] = data['country'].fillna('NA')
data['city'] = data['city'].fillna('NA')

display(data.isnull().sum()/len(data))

"""Replace "-" by "-1". Athletes who could not finished the race or have no data."""

data['10k'] = data['10k'].fillna(-1)
data['25k'] = data['25k'].fillna(-1)
data['35k'] = data['35k'].fillna(-1)
data['30k'] = data['30k'].fillna(-1)
data['5k'] = data['5k'].fillna(-1)
data['20k'] = data['20k'].fillna(-1)
data['40k'] = data['40k'].fillna(-1)
data['half'] = data['half'].fillna(-1)

display(data.isnull().sum()/len(data))

"""# 3. Visualization:"""

import seaborn as sns
for column in data.columns:
    if data[column].dtypes != object:
        ax = sns.boxplot(x=data[column])
        plt.show()

cont_col = []
for column in data.columns:
    if data[column].dtypes != object:
        cont_col.append(column)
plt.figure(figsize=(20, 40))

for i, column in enumerate(cont_col, 1):
    plt.subplot(9, 2, i)
    data[column].hist(bins=35, color='blue', alpha=0.6)
    plt.xlabel(column)

plt.figure(figsize=(14,3))
plt.figure(figsize=(15,10))
correlations = data.corr()
sns.heatmap(round(correlations,2), cmap='RdBu', annot=True, 
            annot_kws={"size": 7}, vmin=-1, vmax=1);

data.describe(percentiles = [.1, .25, .5, .75, .97, .99])

"""# 4. Clustering"""

data = pd.get_dummies(data, columns=['gender'])

data = pd.get_dummies(data, columns=['state'])

data = pd.get_dummies(data, columns=['country'])

data.drop('city', inplace=True, axis = 1)
data.drop('bib', inplace=True, axis = 1)

data.drop('gender_M', inplace=True, axis = 1)

data.head()

data.dtypes

"""## 4.1 Cluster for male and female"""

import sklearn.cluster as cluster

data_fm = data.drop(['5k', '10k', '25k', '20k', '35k', '30k', '40k', 'half', 'gender_F'], axis = 'columns')

K=range(1,12)
wss = []
for k in K:
    kmeans=cluster.KMeans(n_clusters=k,init="k-means++")
    kmeans=kmeans.fit(data_fm)
    wss_iter = kmeans.inertia_
    wss.append(wss_iter)

mycenters = pd.DataFrame({'Clusters' : K, 'WSS' : wss})
mycenters

sns.scatterplot(x = 'Clusters', y = 'WSS', data = mycenters, marker="*")

"""=> Choose k = 3"""

from sklearn import metrics
kmeans = cluster.KMeans(n_clusters=3 ,init="k-means++")
data.head()
kmeans = kmeans.fit(data_fm)
data_fm['Clusters'] = kmeans.labels_
metrics.silhouette_score(data, kmeans.labels_, metric='euclidean')

kmeans.cluster_centers_

sns.distplot(data_fm["Clusters"])

"""The numbers of athletes in 3 cluters are approximately the same."""

data['Clusters'] = data_fm['Clusters']

import matplotlib.pyplot as plt
data[data["gender_F"] == 0]["Clusters"].hist(bins=35, color='blue', label='Male', alpha=0.6)
data[data["gender_F"] == 1]["Clusters"].hist(bins=35, color='red', label='Female', alpha=0.6)
plt.legend()
plt.xlabel('Clusters')

"""The number of female athletes in group 0 is the least and group 2's is the most. However, group 0 has the most male athletes and group 2 has the least female. The number of female and male in group 1 is approximately the same.
 



"""

sns.barplot(x="Clusters", y="5k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="10k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="20k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="25k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="30k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="35k",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="half",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="official",hue = 'gender_F',  data=data)

sns.barplot(x="Clusters", y="pace",hue = 'gender_F',  data=data) # số bước

sns.barplot(x="Clusters", y="age",hue = 'gender_F',  data=data)

data.drop('Clusters', inplace=True, axis = 1)

"""## 4.2 Cluster for age groups"""

sns.distplot(data["age"])

data_age = data.drop(['5k', '10k', '25k', '20k', '35k', '30k', '40k', 'half', 'age'], axis = 'columns')

data.loc[(data['age'] >= 18) & (data['age'] <= 25), 'age1'] = 1
data['age1'] = data['age1'].fillna(0)
data.loc[(data['age'] >= 26) & (data['age'] <= 40), 'age2'] = 1
data['age2'] = data['age2'].fillna(0)
data.loc[(data['age'] > 40) & (data['age'] <= 70), 'age3'] = 1
data['age3'] = data['age3'].fillna(0)
data.loc[(data['age'] > 70), 'age4'] = 1
data['age4'] = data['age4'].fillna(0)

K=range(1,12)
wss = []
for k in K:
    kmeans=cluster.KMeans(n_clusters=k,init="k-means++")
    kmeans=kmeans.fit(data_age)
    wss_iter = kmeans.inertia_
    wss.append(wss_iter)

mycenters = pd.DataFrame({'Clusters' : K, 'WSS' : wss})
mycenters

sns.scatterplot(x = 'Clusters', y = 'WSS', data = mycenters, marker="*")

"""=> Choose k = 3"""

from sklearn import metrics
kmeans = cluster.KMeans(n_clusters=3 ,init="k-means++")
data.head()
kmeans = kmeans.fit(data_age)
data_age['Clusters'] = kmeans.labels_
metrics.silhouette_score(data, kmeans.labels_, metric='euclidean')

data['Clusters'] = data_age['Clusters']

d1 = [0, len(data.loc[(data['age1'] == 1) & (data['Clusters'] == 0)]), len(data.loc[(data['age2'] == 1) & (data['Clusters'] == 0)]), 
      len(data.loc[(data['age3'] == 1) & (data['Clusters'] == 0)]), len(data.loc[(data['age4'] == 1) & (data['Clusters'] == 0)])]
d2 = [1, len(data.loc[(data['age1'] == 1) & (data['Clusters'] == 1)]), len(data.loc[(data['age2'] == 1) & (data['Clusters'] == 1)]), 
      len(data.loc[(data['age3'] == 1) & (data['Clusters'] == 1)]), len(data.loc[(data['age4'] == 1) & (data['Clusters'] == 1)])]
d3 = [2, len(data.loc[(data['age1'] == 1) & (data['Clusters'] == 2)]), len(data.loc[(data['age2'] == 1) & (data['Clusters'] == 2)]), 
      len(data.loc[(data['age3'] == 1) & (data['Clusters'] == 2)]), len(data.loc[(data['age4'] == 1) & (data['Clusters'] == 2)])]
d = [d1, d2, d3]
d
df_age = pd.DataFrame(d, columns=['cluster', 'age1', 'age2', 'age3', 'age4'])
df_age

import plotly.graph_objects as go

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age1,
    name='age1',
    marker_color='blueviolet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age2,
    name='age2',
    marker_color='magenta'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age3,
    name='age3',
    marker_color='violet'
))
fig.add_trace(go.Bar(
    x = df_age.cluster,
    y = df_age.age4,
    name='age4',
    marker_color='indigo'
))
fig.show()

"""Group 0 contains the most youngest (18-40) and the least older.
Group 1 contains the most older (>70).
Group 2 contains the most middle-aged (40-70).
"""

data.drop('Clusters', inplace=True, axis = 1)

"""## 4.3 Cluster for finish time"""

sns.distplot(data["official"])

"""We will divide into 4 groups: who have the finish time less than or equal to 150, in the range from 150 to 300, in the range from 300 to 450, more than 450."""

data_ft = data.drop(['5k', '10k', '25k', '20k', '35k', '30k', '40k', 'half', 'official'], axis = 'columns')

data.loc[(data['official'] <= 200), 'ft1'] = 1
data['ft1'] = data['ft1'].fillna(0)
data.loc[(data['official'] > 200) & (data['official'] <= 300), 'ft2'] = 1
data['ft2'] = data['ft2'].fillna(0)
data.loc[(data['official'] > 300) & (data['official'] <= 400), 'ft3'] = 1
data['ft3'] = data['ft3'].fillna(0)
data.loc[(data['official'] > 400), 'ft4'] = 1
data['ft4'] = data['ft4'].fillna(0)

K=range(1,12)
wss = []
for k in K:
    kmeans=cluster.KMeans(n_clusters=k,init="k-means++")
    kmeans=kmeans.fit(data_ft)
    wss_iter = kmeans.inertia_
    wss.append(wss_iter)

mycenters = pd.DataFrame({'Clusters' : K, 'WSS' : wss})
mycenters

sns.scatterplot(x = 'Clusters', y = 'WSS', data = mycenters, marker="*")

"""=> Choose k = 3"""

from sklearn import metrics
kmeans = cluster.KMeans(n_clusters=3 ,init="k-means++")
data.head()
kmeans = kmeans.fit(data_ft)
data_ft['Clusters'] = kmeans.labels_
metrics.silhouette_score(data, kmeans.labels_, metric='euclidean')

data['Clusters'] = data_ft['Clusters']

d1 = [0, len(data.loc[(data['ft1'] == 1) & (data['Clusters'] == 0)]), len(data.loc[(data['ft2'] == 1) & (data['Clusters'] == 0)]), 
      len(data.loc[(data['ft3'] == 1) & (data['Clusters'] == 0)]), len(data.loc[(data['ft4'] == 1) & (data['Clusters'] == 0)])]
d2 = [1, len(data.loc[(data['ft1'] == 1) & (data['Clusters'] == 1)]), len(data.loc[(data['ft2'] == 1) & (data['Clusters'] == 1)]), 
      len(data.loc[(data['ft3'] == 1) & (data['Clusters'] == 1)]), len(data.loc[(data['ft4'] == 1) & (data['Clusters'] == 1)])]
d3 = [2, len(data.loc[(data['ft1'] == 1) & (data['Clusters'] == 2)]), len(data.loc[(data['ft2'] == 1) & (data['Clusters'] == 2)]), 
      len(data.loc[(data['ft3'] == 1) & (data['Clusters'] == 2)]), len(data.loc[(data['ft4'] == 1) & (data['Clusters'] == 2)])]
d = [d1, d2, d3]
df_ft = pd.DataFrame(d, columns=['cluster', 'ft1', 'ft2', 'ft3', 'ft4'])
df_ft

fig = go.Figure()
fig.add_trace(go.Bar(
    x = df_ft.cluster,
    y = df_ft.ft1,
    name='ft1',
    marker_color='darkorange'
))
fig.add_trace(go.Bar(
    x = df_ft.cluster,
    y = df_ft.ft2,
    name='ft2',
    marker_color='gold'
))
fig.add_trace(go.Bar(
    x = df_ft.cluster,
    y = df_ft.ft3,
    name='ft3',
    marker_color='orangered'
))
fig.add_trace(go.Bar(
    x = df_ft.cluster,
    y = df_ft.ft4,
    name='ft4',
    marker_color='coral'
))
fig.show()

"""Group 0 has the fastest-run athletes and group 1 has the slowest-run athletes."""